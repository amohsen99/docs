##################################################
########## Demo Docker Bind Mounting  ############
##################################################

Objective:
1- Create a new host directory
2- run a first container with this host directory as a volume
3- run a second container with the same volume 
4- Access the file in the volume from the two containers
5- Readonly Option
6- Using a container as a shared data volume



-v [host directory]:[container directory]

# create a new directory 
$ mkdir cont-data
$ cd /cont-data
$ echo "Hello from Host" >> host.txt 
$ cd ..

# run a first container with the volume 
$ docker run -it -d --name cont1 -v /cont-data:/cont1 centos
$ docker exec -it cont1 bash
$ cd /cont1
$ ls >>> you will find the files
$ echo "Hello from cont1" >> cont1.txt 

############## readonly ############

# run a third with >>>>>>>> "readonly"
$ docker run -it -d --name cont2 -v /cont-data:/cont2:ro centos
$ docker exec -it cont2 bash
$ cd /cont2
$ touch 1.text # touch: cannot touch 'tes.text': Read-only file system


-------

###### Sharing Data Between Multiple Docker Containers ######


command:
--volumes-from [name of container]
--volumes-from [name of container]:ro


$ docker run -it -d --name cont-storage -v /shared-data centos
$ docker exec -it cont-storage bash
# you will find a file named "shared-data" 
$ cd /shared-data
$ echo "This file is shared between containers" > cont-storage.txt 

# run a second container
$ docker run -it -d --name cont3 --volumes-from cont-storage centos
$ docker exec -it cont3 bash
$ cd /shared-data
$ ls >>>>>>>> # you will find the same files 

##### Readonly #####
$ docker run -it -d --name cont --volumes-from cont-storage:ro centos
$ docker exec -it cont4 bash
$ cd /shared-data
$ ls >>>>>>>> # you will find the same files 


##############################################
##################   End   ###################
##############################################
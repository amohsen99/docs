
###################################################
###################################################


$ mkdir project

$ cd project/

$ vim app.py

############## The Application's Code - Python FLASK - app.py ################

---
import time

import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello From DolfinED, I have been seen {} times.\n'.format(count)
---
########### End of Code ##########


$ vim requirements.txt
---
flask
redis
---


$ vim Dockerfile
###### The Dockerfile compose will use to create an image of the application ########
---
FROM python:3.7-alpine
WORKDIR /app
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]
---

$ vim docker-compose.yml
###### The Docker Compose Configuration file - docker-compose.yml ########
###### It will build an image of the app and use a readily available image for redis #######
---
version: '3'
services:
  web:
    build: .
    ports:
      - "9000:5000"
  redis:
    image: "redis:alpine"
---

$ docker-compose up -d

# try to access the app on local host port 9000 
# try to change text in "app.py"
# change "Hello From DolfinED, I have been seen..." to >> "Hello From Course Docker Mastery, I have been seen... "

### try to reload the page >>>>> you will notice that nothing changed

## there are two options to ensure the change gets updated in the app:
# 1. rebuild the image by running the docker compose file again
# 2. add bind mount volume in the Docker compose file

# trying the first option:

$ docker-compose down

### add option "--build"
$ docker-compose up -d --build


## open the browser and access the app again, you will find the app got updated

# This is the first way to update the application; however, it is not recommended



## Trying the second option:

# Update the Dockerfileto add the bind mount volume:
---
version: '3'
services:
  web:
    build: .
    ports:
      - "9000:5000"
    volumes:
      - .:/app
    environment:
      FLASK_DEBUG: "true"
  redis:
    image: "redis:alpine"
---

## Remove all old images to ensure we are not using any of them


## Run the docker compose file again 
$ docker-compose up -d 


# go to app.py and make the below change to track how it works

# change "Hello From Course Docker Mastery, I have been seen... " to >> "Hello From DolfinED, I have been seen..."

## go to app again, you will find the app got updated
## Why did the change in the application get reflected without having to rebuild the image? Explain

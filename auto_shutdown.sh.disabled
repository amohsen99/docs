#!/bin/bash

# Log information about what's calling this script
echo "Script executed at $(date)" >> /home/mohsen/kit/docs/caller_log.txt
echo "Parent process: $(ps -o cmd= $PPID)" >> /home/mohsen/kit/docs/caller_log.txt
echo "Environment variables:" >> /home/mohsen/kit/docs/caller_log.txt
env >> /home/mohsen/kit/docs/caller_log.txt
echo "-------------------" >> /home/mohsen/kit/docs/caller_log.txt

# For testing - just show notification without shutdown
/usr/bin/notify-send -u critical "Test Notification" "Auto-shutdown timer test successful at $(date)"
echo "Test run at $(date)" >> /home/mohsen/kit/docs/shutdown_test.log

# Comment out the actual shutdown function for testing
# confirm_shutdown() {
#     # Send desktop notification
#     /usr/bin/notify-send -u critical "Scheduled Shutdown" "Your computer is scheduled to shut down in 1 minute. Open terminal to cancel."
#     
#     # Also log to file
#     echo "Your computer is scheduled to shut down in 1 minute."
#     echo "Press 'c' to cancel shutdown or any other key to shut down now."
#     
#     # Wait for user input with a 60-second timeout
#     read -t 60 -n 1 response
#     
#     if [[ "$response" == "c" || "$response" == "C" ]]; then
#         echo -e "\nShutdown canceled."
#         /usr/bin/notify-send "Shutdown Canceled" "The scheduled shutdown has been canceled."
#         exit 0
#     else
#         echo -e "\nShutting down now..."
#         /usr/bin/notify-send -u critical "Shutting Down" "Your computer is shutting down now."
#         sleep 3  # Give time for notification to be seen
#         
#         # Use loginctl which often works better with systemd
#         loginctl poweroff
#     fi
# }

# Call the confirmation function
# confirm_shutdown
